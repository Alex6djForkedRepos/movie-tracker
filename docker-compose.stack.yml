services:
  postgres:
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - movie-tracker
      - movie-tracker-metrics
    environment:
#      POSTGRES_USER: ${DATABASE_USER:-spaceman}
#      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-spaceman}
      POSTGRES_DB: movietracker
    env_file: ./.env
    deploy:
      placement:
        constraints:
          - node.labels.databases == true
  adminer:
    image: adminer
    restart: always
    networks:
      - movie-tracker
      - caddy-public
    deploy:
      placement:
        constraints:
          - node.role == manager
  backup:
    container_name: backup
    image: tiredofit/db-backup
    env_file:
      - .env
    depends_on:
      - postgres
    environment:
      DB_CHECKSUM: none
      COMPRESSION: GZ
      DEFAULT_ENCRYPT: "true"
      CONTAINER_ENABLE_MONITORING: "false"
      DB_BACKUP_LOCATION: s3
      DEFAULT_BACKUP_INTERVAL: 5     # backup once a day
      DEFAULT_COMPRESSION: GZ

      DB01_TYPE: pgsql
      DB01_HOST: postgres
      DB01_NAME: movietracker
      DB01_USER: spaceman
      DB01_S3_PATH: postgres
    restart: always
    networks:
      - movie-tracker
    deploy:
      placement:
        constraints:
          - node.labels.databases == true
  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    networks:
      - caddy-public
    cap_add:
      - NET_ADMIN
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
    deploy:
      placement:
        constraints:
          - node.role == manager
  frontend:
    image: danilavoronkov/movie-tracker-frontend
    restart: unless-stopped
    networks:
      - movie-tracker
      - caddy-public
    deploy:
      replicas: 5
      placement:
        constraints:
          - node.role == manager
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
      args:
        - VITE_BASE_URL=${VITE_BASE_URL}
        - VITE_API_URL=${VITE_API_URL}
    env_file: ./.env
  backend:
    image: danilavoronkov/movie-tracker-backend
    restart: unless-stopped
    networks:
      - movie-tracker
      - caddy-public
    deploy:
      replicas: 5
      placement:
        constraints:
          - node.role == manager
    build:
      dockerfile: ./apps/backend/Dockerfile
    env_file: ./.env
    volumes:
      - sitemaps:/app/apps/backend/sitemaps
  redis:
    image: redis
    restart: always
    networks:
      - movie-tracker-metrics
      - movie-tracker
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    deploy:
      placement:
        constraints:
          - node.labels.databases == true

volumes:
  caddy_data:
  postgres-data:
  redis-data:
  sitemaps:

networks:
  movie-tracker:
    name: movie-tracker
  movie-tracker-metrics:
    name: movie-tracker-metrics
    external: true
  caddy-public:
    name: caddy-public
    external: true
